#!/usr/bin/env node

'use strict'

// NOTE: There is probably a cleaner way to preserve the sourcemaps for coverage.
// All this does is replace `.../dev/...` with `.../src/ANYTHING_GOES_HERE`
// in the `.nyc_output/*.json` files.
//
// It seems `nyc` is not able to find the source file otherwise.

const fs = require('fs')
const path = require('path')

const NYC_OUTPUT_PATH = './.nyc_output/'

const files = fs.readdirSync(NYC_OUTPUT_PATH).filter((filename) => {
  return /\.json$/.test(filename)
})

const NEW_PATH = path.join(__dirname, '../src/THIS_FILENAME_IS_A_STUB_BUT_THE_PARENT_DIRECTORY_IS_CRUCIAL.js')
files.forEach(function(filename) {
  const jsonPath = path.join(NYC_OUTPUT_PATH, filename)
  const contents = JSON.parse(fs.readFileSync(jsonPath, 'utf8'))
  Object.keys(contents).forEach((key) => {
    const val = contents[key]

    // Just for debugging and so you can run `npm run test:only` multiple times
    const origPath = val._origPath || val.path
    val._origPath = origPath

    // rewrite (and concat for some reason) `dev/**` to `src/`
    if (val.path.startsWith(path.join(__dirname, '..', 'dev'))) {
      // if (val.path.endsWith('.html.js')) {
      //   // these incrementalDOM templates should have sourcemaps but I do not know how to load them
      // } else {
      delete val.path // just so origPath and path show up next to each other
      val.path = NEW_PATH
      // }
    } else {
      // leave the path alone
    }
  })
  // Write the JSON back out
  fs.writeFileSync(jsonPath, JSON.stringify(contents, null, 2))
})
